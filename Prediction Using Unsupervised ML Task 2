# <b>THE SPARKS FOUNDATION<b>
#     
# <b>TASK 2: Prediction using Unsupervised ML<b>
#     
# <b>Objective: To predict the optimum number of clusters and represent it visually.<b>
#     
# <b>Dataset: https://bit.ly/3kXTdox <b>
#     
# <b>Author: ADYANT BHRIGUVANSHI<b>


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sea
%matplotlib inline
# from sklearn.datasets import load_iris
# iris=load_iris()

df=pd.read_csv('iris.csv')
df.head()

df.shape

df.describe()

df.info()

# drop unneccesory column
x=df.drop(['Id'],axis=1)
x.head()

df[df.Species=='Iris-versicolor'].head()

# 0 to 50 target=1, 50 to 100 target=2, 100 to 150 target=3.
df0=df[:50]
df1=df[50:100]
df2=df[100:]

plt.xlabel('SepalLengthCm')
plt.ylabel('SepalWidthCm')
plt.scatter(df0['SepalLengthCm'],df0['SepalWidthCm'],color='green',marker='+')
plt.scatter(df1['SepalLengthCm'],df1['SepalWidthCm'],color='blue',marker='.')
plt.scatter(df2['SepalLengthCm'],df2['SepalWidthCm'],color='orange',marker='*')
plt.title('SepalLengthCm vs SepalWidthCm')
plt.legend(['Iris-setosa', 'Iris-versicolor', 'Iris-virginica'])


plt.xlabel('PetalLengthCm')
plt.ylabel('PetalWidthCm')
plt.scatter(df0['PetalLengthCm'],df0['PetalWidthCm'],color='green',marker='+')
plt.scatter(df1['PetalLengthCm'],df1['PetalWidthCm'],color='blue',marker='.')
plt.scatter(df2['PetalLengthCm'],df2['PetalWidthCm'],color='orange',marker='*')
plt.title('PetalLengthCm vs PetalWidthCm')
plt.legend(['Iris-setosa', 'Iris-versicolor', 'Iris-virginica'])

plt.xlabel('SepalLengthCm')
plt.ylabel('PetalWidthCm')
plt.scatter(df0['SepalLengthCm'],df0['PetalWidthCm'],color='green',marker='+')
plt.scatter(df1['SepalLengthCm'],df1['PetalWidthCm'],color='blue',marker='.')
plt.scatter(df2['SepalLengthCm'],df2['PetalWidthCm'],color='orange',marker='*')
plt.title('SepalLengthCm vs PetalWidthCm')
plt.legend(['Iris-setosa', 'Iris-versicolor', 'Iris-virginica'])

plt.xlabel('PetalLengthCm')
plt.ylabel('SepalWidthCm')
plt.scatter(df0['PetalLengthCm'],df0['SepalWidthCm'],color='green',marker='+')
plt.scatter(df1['PetalLengthCm'],df1['SepalWidthCm'],color='blue',marker='.')
plt.scatter(df2['PetalLengthCm'],df2['SepalWidthCm'],color='orange',marker='*')
plt.title('PetalLengthCm vs SepalWidthCm')
plt.legend(['Iris-setosa', 'Iris-versicolor', 'Iris-virginica'])

# As we can plot graph between any two column and find the similarity or group of cluster.

tf=df.drop(['Id'],axis=1)
tf.corr()
sea.heatmap(tf.corr(),annot=True)

# from this heatmap we can see the dependencies between columns .like sepalwidth and petal width are dependent etc.

x=df.iloc[:,[1,4]].values

from sklearn.cluster import KMeans

z=[]
for i in range(1,15):
    kmeans = KMeans(n_clusters = i, init = 'k-means++', 
                    max_iter = 300, n_init = 10, random_state = 0)
    kmeans.fit(x)
    z.append(kmeans.inertia_)
    
plt.plot(range(1, 15), z)
plt.title('The elbow method')
plt.xlabel('Number of clusters')
plt.ylabel('Z') 
plt.show()
    
    
    # according to elbow method we choose k=3.
    
kmeans = KMeans(n_clusters = 3, init = 'k-means++',max_iter = 300, n_init = 10, random_state = 0)

y_kmeans=kmeans.fit_predict(x)

# Centroid marking
plt.scatter(x[y_kmeans == 0, 0], x[y_kmeans == 0, 1], 
            s = 100, c = 'red', label = 'Iris-setosa')
plt.scatter(x[y_kmeans == 1, 0], x[y_kmeans == 1, 1], 
            s = 100, c = 'blue', label = 'Iris-versicolour')
plt.scatter(x[y_kmeans == 2, 0], x[y_kmeans == 2, 1],
            s = 100, c = 'green', label = 'Iris-virginica')


plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1], 
            s = 100, c = 'yellow', label = 'Centroids')

plt.legend()
